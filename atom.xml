<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>霍丙南的博客</title>
  
  
  <link href="https://huobingnan.github.io/atom.xml" rel="self"/>
  
  <link href="https://huobingnan.github.io/"/>
  <updated>2020-12-01T13:19:07.164Z</updated>
  <id>https://huobingnan.github.io/</id>
  
  <author>
    <name>Huo Bingnan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自旋锁</title>
    <link href="https://huobingnan.github.io/2020/12/01/%E8%87%AA%E6%97%8B%E9%94%81/"/>
    <id>https://huobingnan.github.io/2020/12/01/%E8%87%AA%E6%97%8B%E9%94%81/</id>
    <published>2020-12-01T13:17:28.000Z</published>
    <updated>2020-12-01T13:19:07.164Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>我们通过上述C语言代码实现了一个简单的锁，其实这种锁还有一个名字——自旋锁。这种锁的实现简单，实现思路也非常的清晰明了，但是这个锁是一个表现良好的锁吗？</p><p>在互斥性上，自旋锁能够做到良好的互斥性。但是从开销方面来看，这个锁并不是一个表现良好的锁。为什么这么说呢？因为自旋锁并没有真正的让其他线程去等待，用一个更为确切的词语说，自旋锁的策略是让其他线程<strong>阻塞</strong>。</p><p>事实上，上述临界区代码的执行过程中，没有获得锁的线程同样会获得操作系统分给它的CPU时间片。只不过它阻塞在<code>lock</code>的while循环上，这种操作有点浪费CPU的资源，因为它在这段时间内什么都没做，只是在不断的循环，直至把CPU时间片耗光，然后等待操作系统将CPU的使用权分配给其他线程，我们也称这种等待为<strong>有忙等待</strong>。</p><h4 id="自旋锁的后话"><a href="#自旋锁的后话" class="headerlink" title="自旋锁的后话"></a>自旋锁的后话</h4><p>我们通过一个简单的数据结构+硬件原语的支持实现了一个简单的锁。这个锁具有良好的互斥性，但是我们诟病了这个锁的资源浪费。那么自旋真的就是不好的现象吗？事实上，自旋并非一种坏事，<strong>任何事物要评价它的好与坏，一定程度上也要看事物作用的环境。</strong>有些场景下，自旋的确是一个不错的选择，例如Linux系统中有一种叫做两阶段锁的自旋锁(two-phase-lock)，两阶段锁就意识到自旋可能很有用，尤其是在一些临界区代码很少，（如果临界区代码很少，一个线程一个CPU时间片内就能执行完代码，并且释放锁，那么在CPU时间片分给下一个线程时，下一个线程会立即进入临界区并执行，这样看来，自旋锁的效率会很高，也没有造成资源的浪费，或者在多核CPU的情况下，自旋锁在某些场景下也有不错的表现）线程很快会释放锁的场景。因此两阶段锁的第一阶段先会自旋一段时间，希望它能够获取到锁。</p><p>自旋锁的实现中，除了硬件原语<strong>test-and-set</strong>,还有一些其他的硬件原语也可以帮助自旋锁进行原子性的加锁操作。例如：<strong>compare-and-swap(CAS, 比较并交换)</strong>,**LL/SC(链接加载和条件式存储指令)**。</p><p>除此之外，还有一种公平的自旋锁实现——ticket锁。ticket锁依赖于一个叫做**fetch-and-add(获取并增加)**的硬件原语去实现，如果有兴趣可以查阅相关资料了解ticket锁的实现。</p><h4 id="非自旋锁的简单实现"><a href="#非自旋锁的简单实现" class="headerlink" title="非自旋锁的简单实现"></a>非自旋锁的简单实现</h4><p>既然自旋锁的确有一些不可避免的开销，那么我们如何去实现一个“完美”的锁呢？既然没有获得锁之前，线程会一直自旋等待，那么有没有办法消除这种自旋等待呢？最简单的办法就是如果我不能获取到锁，我就跳出循环，这样不就不会自旋了吗？然而，我们跳出了循环，还必须要保障跳出循环之后不能进入临界区，这就有点棘手了。好在操作系统为我们提供了一个API——<code>yield</code>。</p><p>yield的这个API的历史很是久远，最初它的设计初衷是为了便于操作系统进行多任务的调度，所以期望程序员们在编程时可以在一些代码段中添加yield，一旦执行了yield函数，操作系统就会获得CPU的使用权，进而操作系统会暂时中止掉当前的进程，转而调度其他进程，这样可以时多个进程并发的执行，提高操作系统的交互性和进程响应时间。但是这种设计无疑是加重了程序员们的负担。所以这种方法最终没有应用于操作系统的任务调度器上。</p><p>尽管yield没有被用于任务调度器，但是对于当前我们面临的问题似乎是一个很好的方案，我们可以在获取不到锁的时候调用<code>yield</code>API，进而转交控制权给操作系统，让操作系统继续调度其他线程，这样看来只需对代码进行少量修改，就能对原来的自旋锁进行一个不错的优化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (test_and_set(&amp;mutex-&gt;flag, <span class="number">1</span>) == <span class="number">1</span>) </span><br><span class="line">        yield();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而事实上，这种实现也不是一个很好的方案，为什么这么说呢？尽管这样避免了无意义的循环操作，但是这会让操作系统陷入一种频繁切换线程上下文的操作，这种操作的开销也十分巨大。</p><p>假如我们当前有100个线程，只有一个线程获取到了锁，那么操作系统在最坏的情况下要进行99次的线程上下文切换操作才可以重新将CPU使用权交给当前拥有锁的线程。</p><p>这样的实现虽然避免了自旋，但又让线程进入了一种频繁的<strong>进入-跳出</strong>操作，又让操作系统执行了巨大的开销。</p><h4 id="使用队列"><a href="#使用队列" class="headerlink" title="使用队列"></a>使用队列</h4><p>既然自旋和yield都不是一个很好的选择，那么我们可以选择使用队列的方式的进行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lock_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> guard;</span><br><span class="line">    <span class="keyword">queue_t</span> *q;</span><br><span class="line">&#125; <span class="keyword">lock_t</span>; <span class="comment">/* 使用队列的锁 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    mutex-&gt;flag = <span class="number">0</span>;</span><br><span class="line">    mutex-&gt;guard = <span class="number">0</span>;</span><br><span class="line">    init_queue(mutex-&gt;q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 自旋锁 */</span></span><br><span class="line">    <span class="comment">/* 锁的作用是保障只有一个线程完成队列的添加&amp;线程休眠工作和获得锁操作 */</span></span><br><span class="line">    <span class="keyword">while</span> (test_and_set(&amp;mutex-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mutex-&gt;flag == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 当前还有线程获得锁 */</span></span><br><span class="line">        mutex-&gt;flag = <span class="number">1</span>;</span><br><span class="line">        mutex-&gt;guard = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 已有线程获得锁，将此线程的ID号加入到等待队列中，并休眠 */</span></span><br><span class="line">        queue_add(mutex-&gt;q, gettid());</span><br><span class="line">    m-&gt;guard = <span class="number">0</span>;</span><br><span class="line">        park(); <span class="comment">/* 线程休眠 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 从这里可以看出，自旋锁在针对比较小的临界区时，是很有效的 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 如果有线程正在尝试加锁，那么要阻塞 */</span></span><br><span class="line">    <span class="keyword">while</span> (test_and_set(&amp;mutex-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (queue_empty(mutex-&gt;q))</span><br><span class="line">        mutex-&gt;flag = <span class="number">0</span>; <span class="comment">/* 当前队列中没有线程想要获得锁，所以可以释放 */</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">/* 当前队列中有线程想要获得锁，所以唤醒一个线程即可 */</span></span><br><span class="line">        <span class="comment">/* 这里无需做锁的释放操作，原因是park()API的使用特性,下面会做详细讲解 */</span></span><br><span class="line">        unpark(queue_remove(mutex-&gt;q)); <span class="comment">/* 唤醒一个线程 */</span></span><br><span class="line">    mutex-&gt;guard = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>park</code>和<code>unpark</code>同样是操作系统API，Solaris系统提供了这两个系统调用。这两个系统调用的作用：</p><ol><li><p><code>park</code>，让线程睡眠。线程的状态将处于阻塞状态，一旦线程睡眠，他将不会获得操作系统调度，直到被唤醒。</p><p>同时当线程被唤醒时，<strong>被唤醒的线程会继续从park()函数所在位置开始执行</strong>。这也就是我们在上述代码中唤醒线程之后而不用释放锁的原因。</p></li><li><p><code>unpark</code>，唤醒指定的睡眠的线程。</p></li></ol><p>上述代码设计中其实有一个漏洞，那就是park操作不是原子的。也就是说，当一个线程被当前获得锁的线程唤醒时，他要从park函数开始执行，假如此时发生了中断，操作系统要切换线程，那么就会导致当前正在执行唤醒操作的线程永远的睡眠下去。但是我们也不能将park操作放入由<code>mutex-guard</code>确定的自旋锁中，这样会导致死锁问题。不过，Solaris操作系统意识到了这一点，它提供了一个新的<code>setpark</code>API帮助我们解决了这一原子性问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 尝试进入临界区 */</span></span><br><span class="line">    <span class="keyword">while</span> (test_and_set(&amp;mutex-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mutex-&gt;flag == <span class="number">0</span>) &#123;</span><br><span class="line">        mutex-&gt;flag = <span class="number">1</span>;</span><br><span class="line">    mutex-&gt;guard = <span class="number">0</span>; <span class="comment">/* 退出临界区 */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queue_add(mutex-&gt;q, gettid());</span><br><span class="line">   m-&gt;guard = <span class="number">0</span>; <span class="comment">/* 退出临界区 */</span></span><br><span class="line">        setpark(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;自旋锁&quot;&gt;&lt;a href=&quot;#自旋锁&quot; class=&quot;headerlink&quot; title=&quot;自旋锁&quot;&gt;&lt;/a&gt;自旋锁&lt;/h4&gt;&lt;p&gt;我们通过上述C语言代码实现了一个简单的锁，其实这种锁还有一个名字——自旋锁。这种锁的实现简单，实现思路也非常的清晰明了，但是这个锁是</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://huobingnan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://huobingnan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://huobingnan.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>临界区与锁</title>
    <link href="https://huobingnan.github.io/2020/12/01/%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E9%94%81/"/>
    <id>https://huobingnan.github.io/2020/12/01/%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E9%94%81/</id>
    <published>2020-12-01T12:59:56.000Z</published>
    <updated>2020-12-01T13:15:54.847Z</updated>
    
    <content type="html"><![CDATA[<h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>在多线程并发的环境下，多个线程在竞争着对同一资源对象进行操作，那么这两个线程将处于竞态条件(Race Condition)，竞态条件下执行的代码结果依赖于并发执行或者事件的顺序，这种结果往往具有不确定性和不可重现性。</p><p>临界区(Critical section) 是指进程中一段需要访问共享资源并且当另一个进程处于相应代码区域时便不会执行的代码区域。简单说，临界区就是访问共享变量的代码段，这个代码段一定不能被多个线程同时执行。</p><h4 id="临界区的特点"><a href="#临界区的特点" class="headerlink" title="临界区的特点"></a>临界区的特点</h4><ul><li>互斥性：同一时间，临界区最多只有一个线程进行访问。</li><li>Progress：如果一个线程想要进入临界区，那么它最终会成功。</li><li>有限等待：如果$线程_i$出入临界区入口，那么$线程_i$的请求被接受之前，其他线程进入临界区时间是有限制的。</li><li>无忙等待：如果一个线程在等待进入临界区，那么在此之前它可选择无忙等待。(Optional)</li></ul><p>临界区是一种逻辑概念。那么针对于临界区的性质，有三种实现策略</p><ul><li>基于硬件中断的实现。</li><li>基于软件</li><li>更深层次的抽象</li></ul><p><img src="/2020/12/01/%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E9%94%81/lock.png" loading="lazy"></p><h4 id="基于中断的临界区实现"><a href="#基于中断的临界区实现" class="headerlink" title="基于中断的临界区实现"></a>基于中断的临界区实现</h4><p>在分时操作系统中，没有时钟中断，就没有上下文切换，就没有并发。操作系统的调度器的实现就是依赖于时钟中断。那么我们在实现临界区的时候，可以在一个线程进入临界区代码后主动禁用掉CPU对中断的响应，在线程离开临界区代码后，再开启CPU对中断的响应。这种实现可以实现良好的互斥性和其他临界区的特性。</p><p>但是这种实现并不是最好的实现，因为禁用CPU中断带来的开销非常大。一旦CPU中断响应被禁止，那么不仅仅是其他线程无法被调度，甚至一些基本的设备请求，网络请求等都会受到影响。而且一旦我们临界区代码的开销也同样巨大，那么这种实现的效果就会很差。换言之，这种实现的粒度太大了。</p><p>同时这种实现只能作用于单核CPU，对于多核CPU，就不能保障临界区的特性了。</p><h4 id="基于软件的实现"><a href="#基于软件的实现" class="headerlink" title="基于软件的实现"></a>基于软件的实现</h4><p>基于软件的实现，就是利用一下数据结构+算法，来实现临界区的功能。</p><p>例如Bakery算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    flag[i] &#x3D; TRUE</span><br><span class="line">    turn &#x3D; j</span><br><span class="line">    while (flag[i] &amp;&amp; turn &#x3D;&#x3D; j);</span><br><span class="line">    进入临界区</span><br><span class="line">    flag[i] &#x3D; FALSE</span><br><span class="line">    离开临界区</span><br><span class="line">&#125;while(TRUE)</span><br></pre></td></tr></table></figure><p>相对比基于中断的实现方式，基于软件的实现能够达到一种细粒度的控制。但是基于软件实现的方式会很复杂。</p><h4 id="更深层次的抽象"><a href="#更深层次的抽象" class="headerlink" title="更深层次的抽象"></a>更深层次的抽象</h4><p>锁和信号量。它们是操作系统提供的更高级的编程抽象用来解决临界区问题。锁和信号量不仅能够解决共享数据问题，同时他也可以解决线程间同步的问题，同时可以将我们代码的稳定性提高，降低出现BUG的风险。这两个概念十分重要，它们是解决并发问题的关键，在下面的章节中会详细的介绍。</p><p>这种更高层次的抽象，并不是上述两种实现方法的Next Generation。而是借鉴了上述两种实现方式之后的一个更为通用和抽象的解决方案。</p><h3 id="锁-Lock"><a href="#锁-Lock" class="headerlink" title="锁(Lock)"></a>锁(Lock)</h3><p>之前章节我们讲过并发带来的一个基本问题——共享数据。出现这个问题的原因与指令执行的原子性有关(具体有关原子性的概念可以参照之前讲过的共享数据问题的哪一章节)。显然，单纯从指令的原子性上去避免共享数据问题有很大的难度，因为这个需要依赖于我们的硬件系统，需要硬件系统支持。</p><p>既然如此，那么应该选用哪种方法既不依赖于硬件，还可以让我们的代码原子性的去运行呢。我们可以从软件层面借助于一种数据结构去实现。这个数据结构便是锁。</p><p>锁是对于临界区的一种实现，锁本质上是一个数据结构。在编程中使用它，你可以像使用变量一样去使用。锁为程序员们提供了细粒度的并发控制。之前的章节我们讲过，线程是由程序员创建，由操作系统调度的。换言之，我们创建了线程之后交给了操作系统我们就丢失了对线程的控制权。锁这样的一个数据结构能够在线程调度方面帮助程序员们“曲线救国”。</p><p><img src="/2020/12/01/%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E9%94%81/thread-lock.png" loading="lazy"></p><h4 id="如何去实现一个锁"><a href="#如何去实现一个锁" class="headerlink" title="如何去实现一个锁"></a>如何去实现一个锁</h4><p>既然锁是对于临界区的一种实现，那么锁就应该具备临界区的基本要求。可以这么讲，任何锁都具备互斥性，这是临界区的基本要求。那么什么是互斥性？互斥性就是在涉及到对共享的变量进行操作的代码时，我们必须保证只有一个线程在操作，而且这个线程必须执行完毕临界区内的所有代码才可以让出临界区交给下一个线程处理。</p><p>锁的实现不仅仅只是软件层面的实现，当然仅靠软件(编写代码)去实现锁也可以，但是这样实现的锁不是一个最佳的锁。如果想要实现一个表现良好的锁一定程度上还需要依赖于硬件系统。所以，一个表现良好的锁是软硬结合去实现的。</p><h4 id="如何去评价锁"><a href="#如何去评价锁" class="headerlink" title="如何去评价锁"></a>如何去评价锁</h4><p>我们说到表现良好的锁，何为表现良好，怎么去评价。换言之，一个表现的锁体现在哪些方面上。</p><ol><li>互斥性：最基本的条件，一个锁是否可以阻止多个线程进入临界区。</li><li>公平性：当锁可用时，是否每个线程有公平的机会去抢到锁，是否保障每个线程都有机会进入临界区。</li><li>性能：锁应用于高并发的场景，然而并发的初衷是为了提高效率，如果使用锁带来了很大的开销，那就类似于舍本逐末，买椟还珠了。</li></ol><h4 id="实现一个锁"><a href="#实现一个锁" class="headerlink" title="实现一个锁"></a>实现一个锁</h4><p>正如上图所示，当一个线程获得锁之后，他可以执行临界区中的代码。而没有获得锁的线程只能排队，直到获取到锁才可以执行临界区的代码。这样的设计保障了良好的互斥性。那么应该如何去实现呢。</p><p>我们可以用一个变量(flag)来标志锁是否被某个线程占用。</p><ol><li><p>当第一个线程进入临界区后，它要把这个标志位设为1。</p></li><li><p>当一个线程想要进入临界区时，它首先要检查这个标志位是否1。如果是1那么证明锁被某个线程占用，所以它要等待锁。</p></li><li><p>当线程执行完临界区的代码时，它要将标志位设为0，释放锁的的所有权，以便其他线程使用。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lock_t</span> &#123;</span><span class="keyword">int</span> flag;&#125; <span class="keyword">lockt_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    mutex-&gt;flag = <span class="number">0</span>; <span class="comment">/* 初始状态为0 代表锁未被任何线程持有*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 自旋等待 */</span></span><br><span class="line">    <span class="keyword">while</span> (mutex-&gt;flag != <span class="number">0</span>); <span class="comment">// spin-wait</span></span><br><span class="line">    mutex-&gt;flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    mutex-&gt;flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* thread code */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">lock_t</span> mutex;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">10</span>;</span><br><span class="line">&#123;</span><br><span class="line">    init(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 尝试进入临界区 */</span></span><br><span class="line">mutex-&gt;lock();</span><br><span class="line">    <span class="comment">/* 进入临界区 */</span></span><br><span class="line">    counter++;</span><br><span class="line">    <span class="comment">/* 临界区代码执行完毕，释放锁 */</span></span><br><span class="line">    mutex-&gt;unlock();</span><br><span class="line">    <span class="comment">/* 退出临界区 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样实现的锁有问题吗？，我们可以测试一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">lock_t</span> mutex;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> LOOP_CNT = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    counter--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">threadI</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread %s\n&quot;</span>, (<span class="keyword">char</span>*)args);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; LOOP_CNT; ++i) &#123;</span><br><span class="line">        lock(&amp;mutex);</span><br><span class="line">        increment();</span><br><span class="line">        unlock(&amp;mutex);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">threadD</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread %s\n&quot;</span>, (<span class="keyword">char</span>*)args);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; LOOP_CNT; ++i) &#123;</span><br><span class="line">        lock(&amp;mutex);</span><br><span class="line">        decrement();</span><br><span class="line">        unlock(&amp;mutex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> th1,th2;</span><br><span class="line">    init(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    pthread_create(&amp;th1, <span class="literal">NULL</span>, threadI, <span class="string">&quot;threadI&quot;</span>);</span><br><span class="line">    pthread_create(&amp;th2, <span class="literal">NULL</span>, threadD, <span class="string">&quot;threadD&quot;</span>);</span><br><span class="line"></span><br><span class="line">    pthread_join(th1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(th2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;counter = %d\n&quot;</span>, counter);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果出现了点小意外。</p><p><img src="/2020/12/01/%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E9%94%81/test2.png" loading="lazy"></p><p>虽然这种状况出现的概率很小，但是出现即意味着我们在代码设计上有问题？那么问题出在了哪里呢。</p><p>问题便是，我们的锁也是一个共享的变量，在并发场景下同样会出现共享变量问题。也就是说我们对锁进行操作的代码在CPU看来同样不具备原子性。在我们实现锁的代码中，在对flag标识为进行赋值时，如果操作系统调度中断，那么很有可能出现两个线程同时将flag设置为1，同时拥有锁的现象。显然这连基本的互斥性都无法满足，那么这将是一个bad lock。那么应该怎么做，这就不得不依赖我们的硬件原语了。</p><h4 id="test-and-set"><a href="#test-and-set" class="headerlink" title="test-and-set"></a>test-and-set</h4><p>test-and-set是一种硬件原语。这种硬件原语能够保障指令的原子性。在SPARC上，这个指令叫做<strong>ldstub(load/store unsigned byte) 加载保存无符号字节</strong>。在x86平台上，是<strong>xchg(atomic exchange, 原子交换指令)</strong></p><p>因为这是一个硬件方面的原语，我们只能以C代码的形式来定义一下这个硬件原语做了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test_and_set</span><span class="params">(<span class="keyword">int</span> *oldptr, <span class="keyword">int</span> <span class="keyword">new</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> old = *oldptr;</span><br><span class="line">    *oldptr = <span class="keyword">new</span>;</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用test-and-set这个硬件语言去重新实现一下我们的锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 这段代码可以保证flag设置的原子性 */</span></span><br><span class="line">    <span class="keyword">while</span> (test_and_set(&amp;mutex-&gt;flag, <span class="number">1</span>) == <span class="number">1</span>); <span class="comment">// spin-lock</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">lock_t</span> *mutex)</span> </span>&#123;</span><br><span class="line">    mutex-&gt;flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;临界区&quot;&gt;&lt;a href=&quot;#临界区&quot; class=&quot;headerlink&quot; title=&quot;临界区&quot;&gt;&lt;/a&gt;临界区&lt;/h3&gt;&lt;p&gt;在多线程并发的环境下，多个线程在竞争着对同一资源对象进行操作，那么这两个线程将处于竞态条件(Race Condition)，竞态条件</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://huobingnan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://huobingnan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://huobingnan.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>并发带来的共享数据问题</title>
    <link href="https://huobingnan.github.io/2020/12/01/%E5%B9%B6%E5%8F%91%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"/>
    <id>https://huobingnan.github.io/2020/12/01/%E5%B9%B6%E5%8F%91%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</id>
    <published>2020-12-01T12:56:57.000Z</published>
    <updated>2020-12-01T12:59:10.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="并发带来的问题"><a href="#并发带来的问题" class="headerlink" title="并发带来的问题"></a>并发带来的问题</h3><p>并发固然可以提高程序的运行效率。但是同样也带来了许多沉重的代价，例如：</p><ol><li>共享数据问题。</li><li>并发同步问题。</li><li>BUG不易复现问题。</li></ol><h4 id="共享数据问题"><a href="#共享数据问题" class="headerlink" title="共享数据问题"></a>共享数据问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>; <span class="comment">/* 全局变量 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对变量counter进行递增操作 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">decrement</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In thread %s\n&quot;</span>, (<span class="keyword">char</span>*)args);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; ++i)</span><br><span class="line">        counter--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对变量进行递减操作 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">increment</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In thread %s\n&quot;</span>, (<span class="keyword">char</span>*)args);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">100000</span>; ++i) </span><br><span class="line">        counter++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pthread_t</span> p1,p2;</span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line">    rc = pthread_create(&amp;p1, <span class="literal">NULL</span>, decrement, <span class="string">&quot;DECREMENT&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;thread [DECREMENT] create error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    rc = pthread_create(&amp;p2, <span class="literal">NULL</span>, increment, <span class="string">&quot;INCREMENT&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (rc != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;thread [INCREMENT] create error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_join(p1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(p2, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;counter = %d\n&quot;</span>, counter);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述C语言代码逻辑很简单，一个线程对变量counter进行循环递增操作，另一个线程对变量进行循环递减操作，因为循环的次数是一样的，所以我们预期的结果是，最终counter的值不会改变。但是实际运行结果并不是这样。</p><p>上述代码执行结果的输出具有不确定性。</p><p>从运行结果来看，这并不符合我们的预期，而且大大超出了我们的预期，因为多次运行，结果却还不尽相同。</p><h4 id="线程上下文和原子性"><a href="#线程上下文和原子性" class="headerlink" title="线程上下文和原子性"></a>线程上下文和原子性</h4><p>之所以会产生这样的结果，根本原因在于线程在运行时处于不可控状态。也就是说，你无法确定某一时刻某个线程是否在运行。当我们创建好线程之后，线程的执行与调度将交由操作系统，我们无法管理我们的线程。</p><p>线程的调度，一般采用时间片轮转算法进行调度，即给一个线程分配一定的执行实行例如2ms，2ms之后操作系统会将这个线程当前运行的状态保存到TCB(Thread Control Block，主要用于调度中恢复线程的执行现场), 这个TCB也称为线程上下文。</p><p>正如我们所说，一个线程什么时候被执行，什么时候被挂起完全取决于操作系统，那么当线程用完CPU时间片时，线程函数中代码停止的位置也具有一定的随机性。但是这种随机性是导致出现共享数据问题的原因吗？</p><p>答案是：不全是。导致共享数据问题的原因不仅仅在于线程的调度，还取决于指令的原子性。我们写的高级语言代码最终要编译为二进制数据保存于内存中，那么我们在高级语言中可以通过一行(一句)代码完成的事情，真正交给CPU去做的时候，可能需要好几个步骤。</p><p>例如上述代码中的<code>counter++</code>和<code>counter--</code>。这两句代码看起来好像是一步就可以完成，但是CPU真正去执行的时候并不是。我们可以通过<code>gcc -S [source file]</code>的方式，去查看编译后的汇编代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movlcounter(%rip), %eax</span><br><span class="line">subl$1, %eax</span><br><span class="line">movl%eax, counter(%rip)</span><br></pre></td></tr></table></figure><p>通过汇编代码我们可以看到，<code>counter--</code>需要三个步骤才可以完成。同时也要注意，我们说代码停止运行的位置具有随机性，这个位置是对于最终的机器指令来说的。而不是针对于源代码来说。</p><p>我们看到CPU在执行的时候，首先它要讲counter从内存中转移至寄存器中。然后对寄存器中的值加上立即数1，然后<font color="red">再将加1之后的寄存器中的值转移至内存中。</font></p><p>我们可以将上述三个步骤分别用<font color="red">LOAD，CALC，STORE</font>来代替。问题出现的关键点便在于，我们对数据进行<font color="red">CALC</font>之后是否能及时的STORE至内存中，也就是，现在内存中的值，是否是一个最新的值(合理的值)。如果现在<font color="red">CALC</font>之后，未来得及进行<font color="red">STORE</font>操作就移交了CPU 的使用权，那么其他线程读取到的值，就不是一个合理的值。</p><p>那么什么是原子性，原子性就是我们期望事件不可再分。例如一条指令，我们期望他不会被分解为其他若干条指令。而是一次性，作为一个基本单元的去执行，并且在执行过程中不可能被中断。</p><p>上述代码的问题就在于，我们把<code>counter++</code>和<code>counter--</code>误以原子指令的形式去运行。</p><p>值得注意的是，有时候一条汇编指令并不一定代表一条原子指令。即<font color="red">汇编指令也不能保障原子性。原子性的保障还需依靠硬件系统的微指令来保障</font>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;并发带来的问题&quot;&gt;&lt;a href=&quot;#并发带来的问题&quot; class=&quot;headerlink&quot; title=&quot;并发带来的问题&quot;&gt;&lt;/a&gt;并发带来的问题&lt;/h3&gt;&lt;p&gt;并发固然可以提高程序的运行效率。但是同样也带来了许多沉重的代价，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;共</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://huobingnan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://huobingnan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://huobingnan.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="https://huobingnan.github.io/2020/12/01/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>https://huobingnan.github.io/2020/12/01/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-12-01T12:47:27.000Z</published>
    <updated>2020-12-01T12:57:39.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>并发无论是在操作系统层面还是在编程语言层面，都是一个极为重要的概念。线程(thread)是对并发的一种抽象，经典观念认为一个程序只有一个执行点(一个程序计数器，用来指向要执行的指令)。但是多线程(multi-thread)程序会有多个执行点(多个程序计数器)。换个角度来看，线程的概念类似于进程，有别于进程的地方就是多线程环境下，每个线程他们要共享地址空间，不同线程之间能够访问到共同的数据。</p><p>线程与进程十分相似，但又不同，进程是分时操作系统最早提出的一种任务调度模型。进程的出现使得操作系统拥有更好的交互性和更高的效率。在操作系统中，每个进程都有自己独立的地址空间，各个进程之间相互隔离，互补干扰。</p><p>而线程可以看做是更细粒度的一种进程。但是线程必须依赖于进程存在，没有独立于进程的线程。进程是操作系统分配资源的最小单位，线程是操作系统调度的最小单位。</p><p>现代分时操作系统中大部分操作系统都支持线程，线程成为了CPU，操作系统调度的最小单元。然而线程不仅仅局限于操作系统，线程这个抽象的概念也可以被程序设计语言去实现。所以按照线程的实现者的不同可以将线程分为两类：</p><ol><li>用户线程：有程序设计语言实现(软件实现),不依赖于操作系统。</li><li>内核线程：操作系统实现，操作系统负责调度。</li></ol></blockquote><h2 id="有关进程"><a href="#有关进程" class="headerlink" title="有关进程"></a>有关进程</h2><p><strong>进程：一个具有独立功能的程序在数据集合上的一次动态执行过程。</strong>（进程的学术定义）</p><p>进程这个概念与程序，或者我们的代码有很大的联系。我们写出的代码最终要变成计算机可以识别的二进制语言存储于内存中，进程可以看做是代码的一次动态执行。有人说，程序=数据结构+算法。这种说法完全正确，但也可以退化来看：程序=数据+指令。所以进程就可以看做是数据和指令在计算机内的一次运行。</p><p>所以进程与程序的关系大致如下：</p><ol><li>程序是产生进程的基础。</li><li>程序每次运行构成了不同的进程。</li><li>进程是程序功能的体现。</li><li>一个程序可以对应多个进程，通过调用关系，一个进程又可以包括多个程序。</li></ol><p>同时进程与程序的区别大致如下：</p><ol><li>进程是一个动态的概念。程序是一个静态的概念。程序是有序指令的集合，进程是程序的一次执行。</li><li>进程具有一定的时效性，它的运行周期可预期。</li></ol><p>所以进程可以看作是程序的实例，程序可以看作是进程的模板。</p><h3 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h3><ul><li>code 代码</li><li>data 数据</li><li>PCB(Process Control Block) 进程控制块 </li></ul><h3 id="进程的特点"><a href="#进程的特点" class="headerlink" title="进程的特点"></a>进程的特点</h3><ul><li>动态性：进程可以被动态创建，也可以动态结束。</li><li>并发性：进程可以被独立调度，并占用处理机运行。</li><li>独立性：不同进程之间是相互隔离，互不影响的。</li><li>制约性：因访问共享资源(数据)或进程间同步而受到制约。</li></ul><h3 id="PCB的构成"><a href="#PCB的构成" class="headerlink" title="PCB的构成"></a>PCB的构成</h3><ul><li>进程标识信息<ul><li>本进程标识</li><li>父进程标识</li><li>用户标识</li></ul></li><li>处理器状态信息<ul><li>用户可见寄存器</li><li>控制和状态寄存器：PC，PSW</li><li>栈指针</li></ul></li><li>资源信息</li></ul><h3 id="进程的生命周期"><a href="#进程的生命周期" class="headerlink" title="进程的生命周期"></a>进程的生命周期</h3><p><img src="/2020/12/01/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/process_lifecycle.png" loading="lazy"></p><h2 id="有关线程"><a href="#有关线程" class="headerlink" title="有关线程"></a>有关线程</h2><p><strong>线程是进程中的一条流程</strong>。从资源组合角度来看：进程把一组相关资源组合起来，构成了一个资源平台(环境)，包括地址空间(代码段，数据段),打开的文件等各类资源。从运行角度来看，代码在这个资源平台上执行的一个流程称为线程。</p><p><img src="/2020/12/01/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/thread.png" loading="lazy"></p><h3 id="线程模型的优缺点"><a href="#线程模型的优缺点" class="headerlink" title="线程模型的优缺点"></a>线程模型的优缺点</h3><ul><li>优点<ul><li>一个进程可以存在多个线程(同时存在)。</li><li>各个线程之间可以并发地执行。</li><li>各个线程之间可以共享地址空间和文件资源。</li></ul></li><li>缺点<ul><li>一个线程的崩溃，有可能导致其所属进程的所有线程崩溃。</li></ul></li></ul><p>进程是资源分配的单位，线程是CPU调度的单位。进程拥有一个完整的资源平台，而线程只独享必不可少的资源，入寄存器和栈。同时线程具有与进程类似的五种状态，但是线程比较轻量能够减少并发时间和开销，线程的轻量级主要体现在如下方面：</p><ol><li>线程的创建时间很短。</li><li>线程的终止时间很短。</li><li>同一进程内线程的切换时间很迅速。</li><li>同一进程内不同线程之间共享内存和文件等系统资源。</li></ol><h3 id="用户线程和内核线程"><a href="#用户线程和内核线程" class="headerlink" title="用户线程和内核线程"></a>用户线程和内核线程</h3><ol><li>用户线程：用户线程是操作系统无法感知的线程，它不是由操作系统创建、调度、管理。不依赖于操作系统内核，它由一组用户级别的库函数完成，通过用户线程可以在不支持多线程模型的操作系统之上完成多线程编程。同时，用户线程的切换无须经过操作系统内核，所以它的切换会很快，同时用户还可以自己DIY线程的调度算法。但是用户态线程也有缺点，如果用户线程发起一个阻塞的系统的调用，那么它会阻塞整个进程内的所有用户线程。同时操作系统将时间片分给了进程，而没有直接分给线程，所以平均每个线程的执行时间会比较短，因此用户态线程执行起来会比较慢。</li><li>内核线程：操作系统内核中实现一种机制(线程机制)，由操作系统负责创建、调度、管理线程，使用者仅需发出线程创建相关的系统调用即可。但是内核线程的创建会经历用户态到内核态的转变，所以开销比用户线程大，但是内核线程由操作系统管理，因此当其中一个线程发生阻塞时，并不会影响到同进程内其他线程的工作，同时内核线程分得的CPU时间较多，执行效率较高。</li></ol><p>C语言环境进程创建代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 线程任务函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mythread</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, (<span class="keyword">char</span>*) args);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_attr_t</span> p1Attr; <span class="comment">/* 线程的属性 */</span></span><br><span class="line">    <span class="keyword">pthread_t</span> p1; <span class="comment">/* 线程 */</span></span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line">    pthread_attr_init(&amp;p1Attr); <span class="comment">/* 初始化线程属性 */</span></span><br><span class="line">    pthread_attr_setscope(&amp;p1Attr, PTHREAD_SCOPE_SYSTEM); <span class="comment">/*与操作系统绑定*/</span></span><br><span class="line">    pthread_attr_setschedpolicy(&amp;p1Attr, SCHED_RR); <span class="comment">/* 轮询的方式进行调度 */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">    rc = pthread_create(&amp;p1, &amp;p1Attr, mythread, <span class="string">&quot;A&quot;</span>); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Start a new thread\n&quot;</span>);</span><br><span class="line">    rc = pthread_join(p1, <span class="literal">NULL</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>pthread是POSIX Threads的简称。</p><p>POSIX，可移植操作系统接口（英文：Portable Operating System Interface）POSIX是IEEEE为要在各种UNIX操作系统上运行软件，而定义的一系列操作系统API接口，正式名称为IEEEE Std 1003，国际标准化组织名称</p><p>ISO/IEC 9945。 目前Linux基本上逐步实现了POSIX的兼容，但并未获得正式的POSIX认证。微软的Windows NT声称实现了部分POSIX标准。当前POSIX主要分为四部分：Base Definition、System Interfaces、Shell and Utillities、Rationale。</p><p>在Linux环境中，你可以使用&lt;pthread.h&gt;结合libpthread.so来创建线程，在Windows下可以使用MinGW结合pthread来创建线程，当然也可以使用&lt;windows.h&gt;中的windows API来创建线程，只不过&lt;pthread.h&gt;显得更加标准和易使用，但需要平台和工具的支持。</p></blockquote><p>如你所见，线程的创建有点类似于函数的调用，然而，并不是首先执行函数然后返回给调用者，而是为调用的例程创建一个新的执行线程，它可以独立于调用者运行，至于函数什么时候被调用完全取决于操作系统(相应库函数的调度策略)。开玩笑的说：<font color="red">如果一个程序员遇到了一个问题，他想要用多线程去解决，那么他将面临两个问题。</font></p><p>那么使用多线程并发会带来哪些问题呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;并发无论是在操作系统层面还是在编程语言层面，都是一个极为重要的概念。线程(thread)是对并发的一种抽象，经典观念认为一个程序只有一个执行点(一个程序计数器，用来指向要执行的指令)。但是多线程(multi-thread)程序会有多个执行点(多个程</summary>
      
    
    
    
    <category term="计算机基础" scheme="https://huobingnan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="计算机基础" scheme="https://huobingnan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://huobingnan.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>链表倒数第k个元素</title>
    <link href="https://huobingnan.github.io/2020/12/01/%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E5%85%83%E7%B4%A0/"/>
    <id>https://huobingnan.github.io/2020/12/01/%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E5%85%83%E7%B4%A0/</id>
    <published>2020-12-01T12:32:55.000Z</published>
    <updated>2020-12-01T12:40:24.726Z</updated>
    
    <content type="html"><![CDATA[<p>408真题，题目要求：给定一个无头节点的链表，其内存结构如下，设计算法找到链表中倒数第k个元素。若找到元素返回<code>true</code>并输出，找不到返回<code>false</code>。</p><p><img src="/2020/12/01/%E9%93%BE%E8%A1%A8%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E5%85%83%E7%B4%A0/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.png" loading="lazy"></p><h2 id="思路分析："><a href="#思路分析：" class="headerlink" title="思路分析："></a>思路分析：</h2><p>通过链表结构可知，链表中没有存储长度相关的信息。最直观的思路就是，首先对链表进行一次遍历，目的是获取链表的长度。然后通过链表的长度就可以确定倒数第k个元素所在的位置，因此再次进行链表遍历即可获得倒数第k个元素。</p><p>上述方法，我称之为暴力求解法，还有一个比较好的思路就是使用两个指针。这两个指针都指向链表的某个元素，但是有一些要求，两个指针间隔要相差k个元素。这样我们同时移动两个指针，当靠前的指针遍历到链表尾部时</p><p>（null）那么后面指针指向的元素就是倒数第k个元素咯。</p><h3 id="C-AC代码"><a href="#C-AC代码" class="headerlink" title="C++ AC代码"></a>C++ AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get_count_backword_k</span><span class="params">(<span class="keyword">list_t</span> *_list, <span class="keyword">int</span> _k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">lnode_t</span> *cur = _list, *aux = _list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (aux != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        aux = aux-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (_k-- &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur == _list) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cur-&gt;data &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;408真题，题目要求：给定一个无头节点的链表，其内存结构如下，设计算法找到链表中倒数第k个元素。若找到元素返回&lt;code&gt;true&lt;/code&gt;并输出，找不到返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/01/%E9%93%</summary>
      
    
    
    
    <category term="algorithm" scheme="https://huobingnan.github.io/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://huobingnan.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型链</title>
    <link href="https://huobingnan.github.io/2020/11/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://huobingnan.github.io/2020/11/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-11-30T11:40:24.000Z</published>
    <updated>2020-12-01T05:19:51.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript一款基于<strong>原型</strong>的编程语言，原型实际上是一种设计模式。JavaScript语言之所以基于原型去设计，我猜测与最初的语言应用场景有关。最初，JavaScript是一款运行于浏览器中的语言（当然现在JavaScript的运行环境越来越丰富，完全可以脱离浏览器运行），既然是基于浏览器，那么编程语言在设计上就要考虑内存的占用问题，而原型设计模式在内存占用与代码复用上都无比适合于浏览器环境。</p><p>若要我用一句话来说JavaScript的原型到底是什么，我想它应该是一个<strong>可复用的单例</strong>。这里有两个关键词，<strong>可复用</strong>与<strong>单例</strong>，单例也是一种设计模式，它是对象创建模式的一种，单例最大的好处就在于能够节省内存，避免不必要的对象多次创建。但是单例模式没有很好的可复用性，所以JavaScript采用<strong>原型链</strong>来解决<strong>可复用性</strong>问题。</p><h2 id="由原型链引发的一些思索"><a href="#由原型链引发的一些思索" class="headerlink" title="由原型链引发的一些思索"></a>由原型链引发的一些思索</h2><p>从字面意思上来看，原型链是一种链式结构。JavaScript中每个对象都有一个原型，这是必然。在不同的JavaScript Runtime Environment中，对象原型会有所不同。本文以Node.js运行环境为例进行介绍。</p><ol><li><p><strong>初探原型链</strong></p><p>JavaScript中每个对象都有一个”属性“<code>__proto__</code>，实际上它并不是属性，而是一个属性访问器(Accessor)，</p><p>通过它你可以获取到一个对象的原型。对象的原型也是一个对象，所以对象的原型也有<code>__proto__</code>，这样就构成了一个链式的结构，没错这就是对象的<strong>原型链</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.__proto__);</span><br></pre></td></tr></table></figure></li><li><p><strong>prototype</strong></p><p>在JavaScript中还有另一个与原型链十分重要的概念那就是<code>prototype</code>，<code>prototype</code>是一个属性，但是它并不是一个所有对象都拥有的属性，这个属性仅存在于<code>function</code>对象中。在我看来，能够明确<code>prototype</code>与<code>__proto__</code>之间的区别，你会对JavaScript语言设计的理解上升一个层次。</p><p>JavaScript中常见的几种数据类型，分别是：</p><p>数组类型，字符串类型，数字类型，函数类型，集合类型，映射类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>; <span class="comment">// 数组构造函数</span></span><br><span class="line"><span class="built_in">String</span>; <span class="comment">// 字符串构造函数</span></span><br><span class="line"><span class="built_in">Number</span>; <span class="comment">// 数字构造函数</span></span><br><span class="line"><span class="built_in">Function</span>; <span class="comment">// 函数构造函数</span></span><br><span class="line"><span class="built_in">Map</span>; <span class="comment">// 映射构造函数</span></span><br><span class="line"><span class="built_in">Set</span>; <span class="comment">// 集合构造函数</span></span><br></pre></td></tr></table></figure><p>其实在JavaScript中比较容易混淆的一个概念是构造函数和类型，其实这是两个不同的概念。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;&quot;</span>.__proto__ === <span class="built_in">String</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在JavaScript中函数也是对象，<code>String</code>，<code>Array</code>他们并不是类型，而是对象，一种特殊的对象。这种对象可以派生其他的对象，当它们被当作构造函数使用时，但是StringObject和String并没有父与子的关系，它们两个的关系是平等的，是好兄弟的关系。</p><p>我在上文中也提到过，任何对象都有一个原型，那么我通过构造函数新创建出来的对象它以哪个对象为原型呢？首先我们可以排除它肯定不是以构造函数对象为原型的，上面的例子中我们也证明了。</p><p>答案是：通过构造函数对象<code>new</code>出来的对象是以构造函数中的一个属性<code>prototype</code>所指向的对象为原型的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;&quot;</span>.__proto__ === <span class="built_in">String</span>.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="/2020/11/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE/prototype.png" loading="lazy"></p></li><li><p><strong>原型链的作用</strong></p><p>文章最开始说，JavaScript的原型可以看作是可复用的单例。那么原型链就是为了解决复用性问题。</p><p>首先JavaScript是面向对象的程序设计语言。既然面向对象那么就会有属性和方法的概念。在其他面向对象的程序设计语言中，对象其实就是数据（属性）的集合。至于方法在内存中其实只存在一份。JavaScript的原型链设计也有这方面的考量，但是更多的像是通过原型链的方法借用，对象仍然是数据的集合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>对于对象<code>obj</code>它并没有<code>hasOwnProperty</code>这个方法，但是我们仍然可以调用，这是为什么呢？</p><p>答案其实是原型链在起作用，对象自己没有的方法和属性可以在原型链上向上找寻。</p><p>我们来看一下<code>obj</code>的原型链。</p><p><img src="/2020/11/30/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE/object-prototype-chain.png" loading="lazy"></p><p>没错方法就存在于<code>obj</code>的原型对象中，我们可以写个代码测试一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasOwnProperty = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// name</span></span><br></pre></td></tr></table></figure><p>原型链是一个单向链，原型链上的对象可以看作是父与子的关系。</p></li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>继承是原型的继承</strong>，JavaScript是面向对象的程序设计语言，所以自然会有对象之间的继承，组合等关系。上文讲到JavaScript原型链上的对象有着父与子的关系。所以JavaScript中的继承也是通过原型链来实现的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Shape.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`drawing <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;矩形&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承是原型的继承</span></span><br><span class="line">Rectangle.prototype.__proto__ = Shape.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = <span class="keyword">new</span> Rectangle();</span><br><span class="line">r.draw();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript一款基于&lt;strong&gt;原型&lt;/strong&gt;的编程语言，原型实际上是一种设计模式。JavaScript语言之所以基于原</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://huobingnan.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://huobingnan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis源码阅读环境搭建教程</title>
    <link href="https://huobingnan.github.io/2020/11/27/Mybatis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://huobingnan.github.io/2020/11/27/Mybatis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2020-11-27T14:20:26.000Z</published>
    <updated>2020-11-27T14:35:57.462Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis是一款优秀的Java ORM框架，想要深入学习它，自然要从源码开始。但是源码阅读的学习通常伴随着复杂头痛的配置，本篇文章让您用最简单的步骤配置好Mybatis的源码阅读环境。</p><ol><li><p><strong>源码下载</strong></p><p>Mybatis的官方仓库位于Github上，你可以直接从官方下载最新版本的源码进行阅读，但是这里推荐给你一种更好的选择，那就是优秀的程序员<a href="https://github.com/tuguangquan">tuguangquan</a>上传的中文注释版本的Mybatis源码，并且在他的仓库中详细的阐述的Mybatis源码的配置教程，这里借鉴了前辈的做法，并且做了一些小改动，使源码阅读环境配置更加便利。</p><p>国内的网友推荐使用我配置完毕的gitee仓库下载源码以及依赖(网速比较快，在没有TZ的情况下)。</p><p>在源码阅读之前，请首先配置好你的源码目录，在你本地电脑的任意位置创建一个名为<code>mybatis</code>的文件夹，并且<strong>进入到这个文件夹</strong>。紧接着我们开始下载源码。</p><p>首先下载<code>mybatis-parent</code>的源码：gitee地址 =&gt; <code>https://gitee.com/callback_lab/mybatis-parent.git</code></p><p>然后下载<code>mybatis</code>的源码：gitee地址 =&gt; <code>https://gitee.com/callback_lab/mybatis-src.git</code></p><p>源码下载完毕之后，我们的目录结构应该是这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- mybatis</span><br><span class="line">- mybatis-parent</span><br><span class="line">- mybatis-src</span><br></pre></td></tr></table></figure></li><li><p><strong>导入到IDEA</strong></p><p><img src="/2020/11/27/Mybatis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/mybatis-srcIDEA%E5%AF%BC%E5%85%A5.png" loading="lazy"></p><p>导入到IDEA之后，更新Maven工程，处理好依赖之后，点击LifeCycle进行编译。</p><p><img src="/2020/11/27/Mybatis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/mybatis-srcIDEA-Maven-Compile.png" loading="lazy"></p><p>至此，若无报错信息，我们的Mybatis源码的阅读环境就算是搭建完毕了。</p></li><li><p><strong>注意事项</strong></p><ul><li>请务必保障目录结构如<code>1</code>中所述，不然会导致出错。</li><li>处理好依赖信息之后再进行编译操作。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Mybatis是一款优秀的Java ORM框架，想要深入学习它，自然要从源码开始。但是源码阅读的学习通常伴随着复杂头痛的配置，本篇文章让您用最简单的步骤配置好Mybatis的源码阅读环境。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;源码下载&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Java" scheme="https://huobingnan.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://huobingnan.github.io/tags/Java/"/>
    
    <category term="Tutorial" scheme="https://huobingnan.github.io/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>二分查找树(Java实现)</title>
    <link href="https://huobingnan.github.io/2020/11/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%A0%91-Java%E5%AE%9E%E7%8E%B0/"/>
    <id>https://huobingnan.github.io/2020/11/26/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%A0%91-Java%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-11-26T13:45:38.000Z</published>
    <updated>2020-11-26T13:50:16.316Z</updated>
    
    <content type="html"><![CDATA[<p>二叉搜索树(Binary Search Tree，BST)，是一棵空树或者一棵具备以下特征的二叉树：</p><ul><li>若左子树非空，则左子树所有节点的值都小于根节点的值。</li><li>若右子树非空，则右子树所有节点的值都大于根节点的值。</li><li>左、右子树又分别为一棵二叉排序树。</li></ul><p>二叉搜索树是一种有序的半线性数据结构，如果使用链式的物理存储方式，那么二叉搜索树在查找和插入操作（维持数据有序的前提下）有着不错的表现，这得益于二叉树具备有良好的二分特性，所以在设计算法时可以很好的利用二分的思想。</p><h3 id="BST的Java语言实现"><a href="#BST的Java语言实现" class="headerlink" title="BST的Java语言实现"></a>BST的Java语言实现</h3><p>BST的主要操作有<strong>插入</strong>、<strong>删除</strong>、<strong>搜索</strong>、<strong>序列化</strong>。</p><ul><li>插入：将一个值插入到BST中。</li><li>删除：若BST存在有待删除的值，则将其从BST中移除。</li><li>搜索：查看BST中是否包含有某个值。</li><li>序列化：将BST序列化为一维有序序列。</li></ul><h4 id="BST-定义"><a href="#BST-定义" class="headerlink" title="BST 定义"></a>BST 定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Binary Search Tree 非递归实现版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> callback</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 数据域模板参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@copyright</span> (c) 2020</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Binary Search Tree Node */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TreeNode&lt;T&gt; left; <span class="comment">/* 左节点 */</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode&lt;T&gt; right; <span class="comment">/* 右节点 */</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode&lt;T&gt; parent; <span class="comment">/* 双亲节点 */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> T data; <span class="comment">/* 数据域 */</span></span><br><span class="line"></span><br><span class="line">        TreeNode() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        TreeNode(T data) &#123; <span class="keyword">this</span>.data = data; &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode(TreeNode&lt;T&gt; parent, T data) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode&lt;T&gt; root = <span class="keyword">null</span>; <span class="comment">/* 根节点 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">/* BST的规模 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>二叉树是一种动态树表，其特点是树的结构通常不是一次性生成的，而是在查找过程中，当树中不存在关键字值等于给定值的节点时在进行插入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 插入操作 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TreeNode&lt;T&gt; p = root;</span><br><span class="line">    TreeNode&lt;T&gt; parent = <span class="keyword">null</span>; <span class="comment">/* 记录双亲节点 */</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        parent = p;</span><br><span class="line">        <span class="keyword">if</span> (data.compareTo(p.data) &gt; <span class="number">0</span>) p = p.right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data.compareTo(p.data) &lt; <span class="number">0</span>) p = p.left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> TreeNode&lt;&gt;(<span class="keyword">null</span>, data);</span><br><span class="line">        size++; <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.compareTo(parent.data) &lt; <span class="number">0</span>) parent.left = <span class="keyword">new</span> TreeNode&lt;&gt;(parent, data);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (data.compareTo(parent.data) &gt; <span class="number">0</span>) parent.right = <span class="keyword">new</span> TreeNode&lt;&gt;(parent, data);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 查看BST中是否包含 @param data */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TreeNode&lt;T&gt; p = root;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (data.compareTo(p.data) &gt; <span class="number">0</span>) p = p.right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data.compareTo(p.data) &lt; <span class="number">0</span>) p = p.left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><p>在BST中删除一个节点时，不能把以该节点为根的子树上的节点都删除。正确的操作是，将待删除的节点从BST中摘下，然后将以该节点为根的节点重新链起来。为确保BST的性质不会丢失，删除操作要分三种情况处理：</p><ul><li>删除的节点是一个叶子节点，这种情况直接删除即可，不会破坏BST的性质。</li><li>删除的节点只有一棵左子树或右子树，删除时让删除节点的子树成为其父节点的子树即可。</li><li>删除的节点有左右两棵子树，这种情况较为复杂，一般让该节点的直接后继节点(中序遍历中的下一个节点)代替当前节点，然后，将直接后继节点的父节点的左子树设置为直接后继节点的右子树即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除操作 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(T data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TreeNode&lt;T&gt; p = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (data.compareTo(p.data) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data.compareTo(p.data) &lt; <span class="number">0</span>) p = p.left;</span><br><span class="line">        <span class="keyword">else</span> p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p.left == <span class="keyword">null</span> &amp;&amp; p.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == root) &#123;</span><br><span class="line">            root = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.compareTo(p.parent.data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                p.parent.left = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.compareTo(p.parent.data) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                p.parent.right = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == root) &#123;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.compareTo(p.parent.data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                p.parent.left = p.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.compareTo(p.parent.data) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                p.parent.right = p.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == root) &#123;</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.compareTo(p.parent.data) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                p.parent.left = p.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.compareTo(p.parent.data) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                p.parent.right = p.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* 待删除节点既有左节点又有右节点 */</span></span><br><span class="line">        TreeNode&lt;T&gt; next = getNextTreeNode(p); <span class="comment">/* 获取该节点的直接后继节点 */</span></span><br><span class="line">        p.data = next.data; <span class="comment">/* 用直接后继节点的数据更新当前节点 */</span></span><br><span class="line">        next.parent.left = next.right; <span class="comment">/* 删除直接后继节点，直接后继节点的一定为一个极左节点。 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    size--; <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 获取一个节点的直接后继节点 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> TreeNode&lt;T&gt; <span class="title">getNextTreeNode</span><span class="params">(TreeNode&lt;T&gt; node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node = node.right;</span><br><span class="line">        <span class="keyword">while</span> (node.left != <span class="keyword">null</span>) node = node.left;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        TreeNode&lt;T&gt; parent = node.parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (parent != <span class="keyword">null</span> &amp;&amp; parent.left != node) &#123;</span><br><span class="line">            node = parent;</span><br><span class="line">            parent = node.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找最值"><a href="#查找最值" class="headerlink" title="查找最值"></a>查找最值</h4><p>BST的最值很好查找，只要一直沿着右子树去遍历，那么得到的就是最大值。一直沿着左子树去遍历，那么得到的就是最小值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 查找BST中的最大值 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">max</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TreeNode&lt;T&gt; p = root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p != <span class="keyword">null</span> ? p.data : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查找BST中的最小值 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">min</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TreeNode&lt;T&gt; p = root;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        p = p.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p != <span class="keyword">null</span> ? p.data : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>BST这种数据结构能够维持数据的有序性，并且相对于普通的一维线性结构在性能上有着一定的优势，但是这种优势很不稳定。一般情况下，我们期望BST是横向增长速度高于纵向生长速度，即我们期望BST的是朝着枝繁叶茂的趋势去增长，但是一旦BST的纵向生长速度超过了横向生长速度，那么BST就会退化为一维的链表结构。这样在插入和查找上的性能就会有所损耗。所以为了让树的结构符合我们的预期，我们需要对树的”生长“以及”修剪“进行一定的约束。这也就有了后来的AVL树和红黑树。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;二叉搜索树(Binary Search Tree，BST)，是一棵空树或者一棵具备以下特征的二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若左子树非空，则左子树所有节点的值都小于根节点的值。&lt;/li&gt;
&lt;li&gt;若右子树非空，则右子树所有节点的值都大于根节点的值。&lt;/li&gt;
&lt;li&gt;左</summary>
      
    
    
    
    <category term="Java" scheme="https://huobingnan.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://huobingnan.github.io/tags/Java/"/>
    
    <category term="数据结构" scheme="https://huobingnan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Windows下安装MySQL教程</title>
    <link href="https://huobingnan.github.io/2020/11/26/Windows%E4%B8%8B%E5%AE%89%E8%A3%85MySQL%E6%95%99%E7%A8%8B/"/>
    <id>https://huobingnan.github.io/2020/11/26/Windows%E4%B8%8B%E5%AE%89%E8%A3%85MySQL%E6%95%99%E7%A8%8B/</id>
    <published>2020-11-26T10:12:40.000Z</published>
    <updated>2020-11-26T10:18:23.145Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>下载MySQL安装包</strong></p><p>从MySQL官网下载相应版本的安装包<a href="http://www.mysql.com/">mysql官网地址</a>。</p><p>安装包分为.msi安装包与.zip压缩安装包。本文以.zip压缩包的形式介绍Windows下安装配置MySQL的过程。</p></li><li><p><strong>撰写配置文件</strong></p><p>进入解压缩之后的MySQL安装包，一般情况下，其目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- mysql-xxxx-winx64</span><br><span class="line">- bin</span><br><span class="line">- docs</span><br><span class="line">- lib</span><br><span class="line">- include</span><br><span class="line">- share</span><br></pre></td></tr></table></figure><p>在此目录下创建一个名为<code>my.ini</code>的配置文件，并编辑其内容为:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span> </span><br><span class="line"><span class="comment"># 设置为自己MYSQL的安装目录 </span></span><br><span class="line"><span class="attr">basedir</span>=F:/mysql-<span class="number">5.7</span>.<span class="number">25</span>-winx64</span><br><span class="line"><span class="comment"># 设置为MYSQL的数据目录 </span></span><br><span class="line"><span class="attr">datadir</span>=F:/mysql-<span class="number">5.7</span>.<span class="number">25</span>-winx64/data</span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">character_set_server</span>=utf8</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER</span><br><span class="line"><span class="comment">#开启查询缓存</span></span><br><span class="line"><span class="attr">explicit_defaults_for_timestamp</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#设置时区</span></span><br><span class="line"><span class="attr">default-time_zone</span>=+<span class="number">8</span>:<span class="number">00</span></span><br><span class="line">secure_file_priv=</span><br></pre></td></tr></table></figure></li><li><p><strong>配置环境变量与注册服务</strong></p><ul><li><p>环境变量注册：</p><p>右键我的电脑 –&gt; 点击属性 –&gt; 高级系统设置 –&gt; 环境变量 –&gt; 新建环境变量<code>MYSQL_HOME</code>，变量值为MySQL的安装目录。–&gt; 编辑PATH变量，添加项<code>%MYSQL_HOME%\bin</code> –&gt; 保存。</p><p>配置完成环境变量之后，可以进行MySQL服务的初始化与注册工作。</p></li><li><p>MySQL初始化：</p><p><code>win + R</code>，输入<code>CMD</code>进入命令提示符界面，进入MySQL安装目录的<code>bin</code>目录下，<strong>一定要在此目录下执行下面的命令，不然会出现BUG</strong> 。</p><p>输入<code>mysqld --initialize</code>，初始化MySQL数据库。</p><p>若这一步骤出错，请将<code>my.ini</code>文件更改为<code>ASNI</code>编码格式保存。</p><p>初始化完毕后，进入<code>data</code>目录，打开文件<code>callback.err</code>查找初始化登录密码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-11-15T05:01:16.628365Z 1 [Note] A temporary password is generated for root@localhost: ?az:cRvVc7QY &lt;--- 这个是初始化登录密码,登录之后可以修改。</span><br></pre></td></tr></table></figure></li><li><p>将MySQL注册为系统服务：</p><p>打开命令提示符程序并输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --install MySQL</span><br></pre></td></tr></table></figure></li><li><p>MySQL服务的开启与关闭</p><p>开启服务：<code>net start MySQL</code>。</p><p>关闭服务：<code>net stop MySQL</code>。</p></li></ul><ol start="4"><li><p><strong>修改初始化密码</strong></p><p>使用<code>mysql</code>连接MySQL服务器。然后修改默认密码。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;xxxxx&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;下载MySQL安装包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从MySQL官网下载相应版本的安装包&lt;a href=&quot;http://www.mysql.com/&quot;&gt;mysql官网地址&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;安装包分为.msi安装包与.zip压缩安装</summary>
      
    
    
    
    <category term="MySQL" scheme="https://huobingnan.github.io/categories/MySQL/"/>
    
    
    <category term="Tutorial" scheme="https://huobingnan.github.io/tags/Tutorial/"/>
    
    <category term="MySQL" scheme="https://huobingnan.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
